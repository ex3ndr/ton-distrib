name: Release Distributive

on: 
  workflow_dispatch:
    inputs:
      versionName:
        description: 'Name of version  (ie 5.5.0)'
        required: true

jobs:
  create-release:
    runs-on: ubuntu-18.04
    steps:
      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.versionName }}
          release_name: TON v${{ github.event.inputs.versionName }}
          draft: true
          prerelease: false
  build-linux-x64:
    runs-on: ubuntu-18.04
    needs: create-release
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      with:      
        submodules: 'recursive'
    - name: Run Cppcheck
      uses: Bedzior/run-cppcheck@master
      with:
        enabled checks: all
        enable inconclusive: true
        generate report: true
    - name: Upload report
      uses: actions/upload-artifact@v1
      with:
        name: report
        path: output
    - name: mkdir
      run: |
        mkdir build
    - name: cmake
      run: | 
        cd build
        cmake ..
    - name: make -j4
      run: |
        cd build
        make -j4
    - name: Find & copy binaries
      run: |
        mkdir artifacts
        cp build/crypto/fift artifacts/
        cp build/crypto/func artifacts/
        cd artifacts
        tar -zcvf fift-${{ github.event.inputs.versionName }}.tar.gz fift
        tar -zcvf func-${{ github.event.inputs.versionName }}.tar.gz func
        
    - name: Upload fift
      uses: actions/upload-artifact@master
      with:
        name: fift-linux-x64-${{ github.event.inputs.versionName }}
        path: artifacts/fift-${{ github.event.inputs.versionName }}.tar.gz
    - name: Upload func
      uses: actions/upload-artifact@master
      with:
        name: func-linux-x64-${{ github.event.inputs.versionName }}
        path: artifacts/func-${{ github.event.inputs.versionName }}.tar.gz
  build-macos-x64:
    runs-on: macos-10.15
    needs: create-release
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      with:      
        submodules: 'recursive'
    - name: Import codesign certificate
      uses: apple-actions/import-codesign-certs@v1
      with: 
        p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}        
    - name: Compile OpenSSL
      run: |
        git clone https://github.com/openssl/openssl openssl_1_1_1
        cd openssl_1_1_1
        git checkout OpenSSL_1_1_1-stable
        ./Configure --prefix=/usr/local/macos darwin64-x86_64-cc -static -mmacosx-version-min=10.15
        make build_libs -j4

    - name: Build TON
      run: |
        rootPath=`pwd`
        mkdir build
        cd build
        cmake -DOPENSSL_FOUND=1 -DOPENSSL_INCLUDE_DIR=$rootPath/openssl_1_1_1/include -DOPENSSL_CRYPTO_LIBRARY=$rootPath/openssl_1_1_1/libcrypto.a -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=10.15 -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_BUILD_TYPE=Release ..
        make -j4
    
    - name: Sign and notarize
      run: |
        mkdir artifacts
        cp build/crypto/fift artifacts/
        cp build/crypto/func artifacts/
        cd artifacts
        codesign --timestamp --options=runtime -s "${{ secrets.BUILD_TEAM_NAME }}" -v func
        codesign --timestamp --options=runtime -s "${{ secrets.BUILD_TEAM_NAME }}" -v fift
        
    - name: Find & copy binaries
      run: |
        cd artifacts
        tar -zcvf fift-${{ github.event.inputs.versionName }}.tar.gz fift
        tar -zcvf func-${{ github.event.inputs.versionName }}.tar.gz func
        
    - name: Upload fift
      uses: actions/upload-artifact@master
      with:
        name: fift-macos-x64-${{ github.event.inputs.versionName }}
        path: artifacts/fift-${{ github.event.inputs.versionName }}.tar.gz
    - name: Upload func
      uses: actions/upload-artifact@master
      with:
        name: func-macos-x64-${{ github.event.inputs.versionName }}
        path: artifacts/func-${{ github.event.inputs.versionName }}.tar.gz